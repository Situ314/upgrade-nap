<?php

namespace App\Http\Controllers\v1;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Spatie\ArrayToXml\ArrayToXml;
use \App\Models\HotelRoom;
use \App\Models\Hotel;
use \App\Models\GuestRegistration;
use \App\Models\GuestCheckinDetails;
use \App\Models\CompanyIntegration;
use \App\Models\RoomMove;
use \App\Models\MaestroPmsSalt;

use DateTime;
use DB;
use Storage;

class MaestroPmsController extends Controller {

    public function index(Request $request) 
    {
        
        // Convert XML to JSON
        // $this->writeLog("maestro_pms_data",null,$request->getContent());

        $xml        = simplexml_load_string($request->getContent());
        $str_json   = json_encode($xml);
        $json       = json_decode($str_json);

        
        // Search in the records where the company is equal 'Maestro pms' then filter 
        // by hotel_id in the field Sync         
        $company = CompanyIntegration::where(function( $query ) {
            $query
                ->where('int_id', 1)
                ->where('state', 1);
        })
        ->get();
        
        $company = $company->where('config.hotel_id',$json->HotelId)->first();
        
        
        if( $company ){
            $hotel_id = $company->hotel_id;
        }
        
        // Validate if HotelId is active in anything records of the integrations         
        $status = 'failure';
        $message = '';
        if( $company ) {
            $hotel_id   = $company["hotel_id"];
            $user_id    = $company["created_by"];
            $auk        = $company["config"]["agreed_upon_key"];

            // Validate a GetSalt is requested             
            if(isset($json->GetSalt)) {

                $salt = $this->getSalt($hotel_id);
                $result = ArrayToXml::convert([
                    'HotelId'   => $json->HotelId,
                    'Salt'      => $salt
                ], 'Response');

                return response($result,200)->header('Content-Type', 'text/xml');

            } else  {
                // else, is a normal request
                $haveAccess = $this->validatePasswordHash($hotel_id, $json->PasswordHash, $auk);

                //Validate PasswordHash, if result == true, the request is valid
                if($haveAccess["result"]) {
                    if(method_exists($this, $json->Action)) {   

                        $method = $json->Action;

                        if($this->$method($hotel_id, $user_id, $json)){
                            $status = 'Success';
                        };

                        $result = ArrayToXml::convert([
                            'HotelId'       => $json->HotelId,
                            'PasswordHash'  => $json->PasswordHash,
                            'Status'        => $status,
                            'Message'       => ''
                        ], 'Response');

                        return response($result, 200)->header('Content-Type', 'text/xml');
                    }
                } else {
                    /**
                     * else, the respons is a error
                     */
                    $result = ArrayToXml::convert([
                        'HotelId'       => $json->HotelId,
                        'PasswordHash'  => $json->PasswordHash,
                        'Status'        => 'failure',
                        'Message'       => $haveAccess["error"]
                    ], 'Response');

                    return response($result,200)->header('Content-Type', 'text/xml');
                }
            }
        } else  {
            if(isset($json->PasswordHash)) {

                $result = ArrayToXml::convert([
                    'HotelId'       => $json->HotelId,
                    'PasswordHash'  => $json->PasswordHash,
                    'Status'        => 'failure',
                    'Message'       => 'There is no active integration in this hotel'
                ], 'Response');

            } else {

                $result = ArrayToXml::convert([
                    'Status'        => 'failure',
                    'Message'       => 'Inactive integration'
                ], 'Response');

            }

            return response($result,200)->header('Content-Type', 'text/xml');
        }
    }

    private function ReservationList( $hotel_id, $user_id, $data ) 
    {
        try {
            $reservation_data = [];
            $is_array = is_array($data->Reservations->ReservationData);

            if($is_array) { 
                $reservation_data = $data->Reservations->ReservationData; 
            } else {
                $reservation_data[] = $data->Reservations->ReservationData;
            }

            foreach ($reservation_data as $rd) {
                switch ($rd->ReservationStatus) {
                    case 'reserved':
                        $this->CheckInReservationList($hotel_id, $user_id, $rd, false);
                        break;

                    case 'checked_in':
                        $this->CheckInReservationList($hotel_id, $user_id, $rd, true);
                        break;

                    case 'cancelled':
                    case 'checked_out':
                        $this->CheckOutReservationList($hotel_id, $user_id, $rd);
                        break;
                }
            }

            $success = true;

        } catch( \Exception $e ) {

            $this->writeLog("maestro_pms", $hotel_id, "Error in reservation list function: ".$e);
            $success = false;

        }
        
        return $success;
    }

    private function CheckInReservationList($hotel_id, $user_id, $ch, $sendEmail) 
    {
        try 
        {
            $success = false;

            $this->writeLog("maestro_pms", $hotel_id, "Check in reservation list");
            $this->writeLog("maestro_pms", $hotel_id, "data: ".json_encode($ch));

            DB::beginTransaction();

            $this->configTimeZone($hotel_id);
            if( ( isset($ch->ArrivalDate) && is_string($ch->ArrivalDate) ) && ( isset($ch->DepartureDate) && is_string($ch->DepartureDate) ) ) {
                $guest_registration = [
                    "hotel_id"      => $hotel_id,
                    "lastname"      => $this->proccessString(isset($ch->LastName)       ? $ch->LastName     : ''),
                    "firstname"     => $this->proccessString(isset($ch->FirstName)      ? $ch->FirstName    : ''),
                    "zipcode"       => $this->proccessString(isset($ch->ZipCode)        ? $ch->ZipCode      : ''),
                    "email_address" => $this->proccessString(isset($ch->EmailAddress)   ? $ch->EmailAddress : ''),
                    "language"      => '',
                    "phone_no"      => (isset($ch->Phone) && is_string($ch->Phone)) ? $this->proccessString("+".str_replace(['-','.'],'',$ch->Phone)) : '',
                    "created_by"    => $user_id,
                    "created_on"    => date('Y-m-d H:i:s'),
                    "comment"       => '',
                    "city"          => $this->proccessString(isset($ch->Country) ? $ch->Country : ''),
                    "address"       => '',
                    "state"         => '',
                    "updated_on"    => null,
                    "updated_by"    => null,
                    "id_device"     => null,
                    "is_active"     => 1,
                    'dob'           => null
                ];

                $comment = '';
                if(isset($ch->ReservationText) && isset($ch->ReservationText->Text)) {
                    $commen_array = [];
                    if(is_array($ch->ReservationText->Text)){
                        $commen_array = $ch->ReservationText->Text;
                    } else {
                        $commen_array[] = $ch->ReservationText->Text;
                    }

                    foreach ($commen_array as $key => $value) {
                        $comment .= is_string($value) ? "$value " : "";
                    }

                    $guest_registration['comment'] = $this->proccessString(substr($comment,0,250));
                }

                $firstname      = $guest_registration['firstname'];
                $lastname       = $guest_registration['lastname'];                
                $guestReg_found = GuestRegistration::where(function( $query ) use ( $firstname, $lastname ) {
                    $query
                        ->where('lastname', $lastname)
                        ->where('firstname', $firstname);
                })
                ->first();

                if( $guestReg_found ) {

                    $guestReg_found->fill($guest_registration);
                    $guestReg_found->save();
                    $guest_id = $guestReg_found->guest_id;

                    $this->writeLog("maestro_pms", $hotel_id, "Guest found, updating information: ".json_encode($guestReg_found));
                
                } else {

                    $guest      = GuestRegistration::create($guest_registration);
                    $guest_id   = $guest->guest_id;
                    $this->writeLog("maestro_pms", $hotel_id, "Save guest: ".json_encode($guest));

                }

                $roomCode   = 'Reservation';

                if( (isset($ch->Room)) &&  (isset($ch->Room->RoomCode)) && (is_string($ch->Room->RoomCode) && !empty($ch->Room->RoomCode)) ) {
                    $roomCode = $ch->Room->RoomCode;
                }

                $room       = $this->findRoomId($hotel_id, $user_id, $roomCode);
                $room_no    = $room["room_id"];
                $location   = $room["room"];

                $check_in = (new DateTime($ch->ArrivalDate))->format('Y-m-d H:i:s');
                $check_out = (new DateTime($ch->DepartureDate))->format('Y-m-d H:i:s');

                $guest_checkin_details = [
                    "guest_id"  => $guest_id,
                    "hotel_id"  => $hotel_id,
                    "room_no"   => $room_no,
                    "check_in"  => $check_in,
                    "check_out" => $check_out,
                    "status"    => 1,
                    "comment"   => ''
                ];

                $checkin_in_range = GuestCheckinDetails::where('status', 1)
                ->where('room_no', $room_no)                
                ->where(function( $query ) use ( $guest_id, $room_no, $check_in, $check_out ) {
                    $query
                        ->whereRaw("'$check_in' BETWEEN check_in and check_out")
                        ->orWhereRaw("'$check_out' BETWEEN check_in and check_out");
                })->get();

                $this->writeLog("maestro_pms", $hotel_id, "Checkin in range 1: ".json_encode($checkin_in_range));
                
                if(count($checkin_in_range) == 0) {

                    $rs = GuestCheckinDetails::create($guest_checkin_details);
                    $this->writeLog("maestro_pms", $hotel_id, "GuestCheckinDetails 1: ".json_encode($rs));
                    $this->writeLog("maestro_pms", $hotel_id, "Save Check In, in CheckInReservationList 1: [ guest_id => $guest_id, Guest checkin details => ".$rs->sno."]");

                    if( !empty($guest_registration['email_address']) ) {
                        if($sendEmail) {
                            $rs = $this->sendAngelInvitation($guest_registration['email_address'], $hotel_id);
                            $this->writeLog("maestro_pms", $hotel_id, "   Send angel invitation 1: ".$guest_registration['email_address']);
                            $this->writeLog("maestro_pms", $hotel_id, "   Send angel invitation 1 rs: ".json_encode($rs));
                        }
                    }
                    // $this->sendHousekeepingCheckIn($hotel_id,[
                    //     "action" => "create",
                    //     "hotel_id" => $hotel_id,
                    //     "guests" => [
                    //         "guest_id"  => $guest_id,
                    //         "check_in"  => $guest_checkin_details['check_in'],
                    //         "check_out" => $guest_checkin_details['check_out']
                    //     ]
                    // ]);
                    $this->saveLogTracker([
                        'module_id' => 8,
                        'action'    => 'add',
                        'prim_id'   => $guest_id,
                        'staff_id'  => $user_id,
                        'date_time' => date('Y-m-d H:i:s'),
                        'comments'  => '',
                        'hotel_id'  => $hotel_id,
                        'type'      => 'API-Maestro_pms'
                    ]);
                    $success = true;                    
                    DB::commit();
                    $this->writeLog("maestro_pms", $hotel_id, "End check in reservation list.\n\n");
                }
            }
        } catch (\Exception $e) {
            $success = false;
            DB::rollback();
            $this->writeLog("maestro_pms", $hotel_id, "Error in Check in reservation list: ".$e."\n\n");            
        }

        return $success;
    }

    public function CheckOutReservationList($hotel_id, $user_id, $ch) 
    {
        
        $this->writeLog("maestro_pms", $hotel_id,"Start CheckOutReservationList");

        $this->configTimeZone($hotel_id);
        DB::beginTransaction();
        try {
            $check_out = [];
            $check_out[] = [
                'FirstName'     => '',
                'LastName'      => '',
                'EmailAddress'  => '',
                'ArrivalDate'   => '',
                'DepartureDate' => '',
            ];
            if(isset($ch->FirstName) && is_string($ch->FirstName)) {
                $check_out[0]['FirstName'] = $ch->FirstName;
            }
            if(isset($ch->LastName) && is_string($ch->LastName)) {
                $check_out[0]['LastName'] = $ch->LastName;
            }
            if(isset($ch->EmailAddress) && is_string($ch->EmailAddress)) {
                $check_out[0]['EmailAddress'] = $ch->EmailAddress;
            }
            if(isset($ch->ArrivalDate) && is_string($ch->ArrivalDate)) {
                $check_out[0]['ArrivalDate'] = $ch->ArrivalDate;
            }
            if(isset($ch->DepartureDate) && is_string($ch->DepartureDate)) {
                $check_out[0]['DepartureDate'] = $ch->DepartureDate;
            }

            $check_out = json_decode(json_encode($check_out));
            $this->CheckOut($hotel_id, $user_id, $check_out);

            $success = true;
            DB::commit();
        } catch (\Exception $e) {
            $error = $e;
            $success = false;
            DB::rollback();
            $this->writeLog("maestro_pms", $hotel_id,"Error CheckOutReservationList: ".$e);
        }
        return $success;
    }

    public function CheckIn($hotel_id, $user_id, $data) 
    {

        $this->writeLog("maestro_pms", $hotel_id, "Start CheckIn");

        $success = false;
        $check_in = [];

        $is_array = is_array($data->CheckInData->GuestInfo);

        if($is_array) {
            $check_in = $data->CheckInData->GuestInfo;
        } else {
            $check_in[] = $data->CheckInData->GuestInfo;
        }   

        $check_in = $this->unique_inArray($hotel_id, $check_in);
        $this->configTimeZone($hotel_id);      

        try {

            $this->writeLog("maestro_pms", $hotel_id, "Start foreach");

            $index = 0;

            foreach ($check_in as $ch) {
                DB::beginTransaction();

                $this->writeLog("maestro_pms", $hotel_id, "[ ".$index++." ] => Data: ".json_encode($ch));         

                $guest_registration = [
                    "hotel_id"      => $hotel_id,
                    "lastname"      => $this->proccessString(isset($ch->LastName) ? $ch->LastName : '' ),
                    "firstname"     => $this->proccessString(isset($ch->FirstName) ? $ch->FirstName : ''),
                    "zipcode"       => $this->proccessString(isset($ch->ZipCode) ? $ch->ZipCode : ''),
                    "email_address" => $this->proccessString(isset($ch->EmailAddress) ? $ch->EmailAddress : ''),
                    "language"      => '',
                    "phone_no"      => ( isset($ch->Cell) && is_string($ch->Cell) ) ? "+".str_replace(['-','.'],'',$this->proccessString($ch->Cell)) : '',
                    "created_by"    => $user_id,
                    "created_on"    => date('Y-m-d H:i:s'),
                    "comment"       => '',
                    "city"          => $this->proccessString(isset($ch->Country) ? $ch->Country : ''),
                    "address"       => '',
                    "state"         => '',
                    "updated_on"    => null,
                    "updated_by"    => null,
                    "id_device"     => null,
                    "is_active"     => 1,
                    'dob'           => null,
                    'angel_status'  => $this->validateAngelStatus($hotel_id)
                ];

                $comment = '';
                               
                if(isset($ch->ReservationText) && isset($ch->ReservationText->Text)) {
                    if(is_array($ch->ReservationText->Text)){
                        foreach ($ch->ReservationText->Text as $key => $value) {
                            if(is_string($value)) {
                                $comment .= "$value ";
                            }                    
                        }
                        $guest_registration['comment'] = substr($this->proccessString($comment),0,250);
                    }else{
                        $guest_registration['comment'] = substr($this->proccessString($ch->ReservationText->Text),0,250);
                    }
                }

                $firstname      = $guest_registration['firstname'];
                $lastname       = $guest_registration['lastname'];

                $guestReg_found = GuestRegistration::where(function( $query ) use ( $firstname, $lastname ) {
                    $query
                        ->where('lastname', $lastname)
                        ->where('firstname', $firstname);
                })
                ->first();

                $this->writeLog("maestro_pms", $hotel_id, "guestReg_found: ".json_encode($guestReg_found));         

                if( $guestReg_found ) {

                    $guestReg_found->fill($guest_registration);
                    $guestReg_found->save();
                    $guest_id = $guestReg_found->guest_id;
                    $this->writeLog("maestro_pms", $hotel_id, "Guest found, updating information: ".json_encode($guestReg_found));

                } else {

                    $guest = GuestRegistration::create($guest_registration);
                    $guest_id = $guest->guest_id;
                    $this->writeLog("maestro_pms", $hotel_id, "Save guest: ".json_encode($guest));

                }
                
                $roomCode   = 'Reservation';
                if( (isset($ch->RoomCode)) && (is_string($ch->RoomCode) && !empty($ch->RoomCode)) ) {
                    $roomCode = $ch->RoomCode;
                }

                $room       = $this->findRoomId($hotel_id, $user_id, $roomCode);

                $this->writeLog("maestro_pms", $hotel_id, "room: ".json_encode($room));         

                $room_no    = $room["room_id"];
                $location   = $room["room"];

                $check_in = (new DateTime($ch->ArrivalDate))->format('Y-m-d H:i:s');
                $check_out = (new DateTime($ch->DepartureDate))->format('Y-m-d H:i:s');

                $guest_checkin_details = [
                    "guest_id"  => $guest_id,
                    "hotel_id"  => $hotel_id,
                    "room_no"   => $room_no,
                    "check_in"  => $check_in,
                    "check_out" => $check_out,
                    "status"    => 1,
                    "comment"   => ''
                ];

                $checkin_in_range = GuestCheckinDetails::where('status',1)
                ->where('room_no', $room_no)
                ->where(function( $query ) use ( $guest_id, $room_no, $check_in, $check_out ){
                    $query                        
                        ->whereRaw("'$check_in' BETWEEN check_in and check_out")
                        ->orWhereRaw("'$check_out' BETWEEN check_in and check_out");
                })
                ->get();

                $this->writeLog("maestro_pms", $hotel_id, "Checkin in range 2: ".json_encode($checkin_in_range));


                if( count($checkin_in_range ) == 0 )  {

                    $rs = GuestCheckinDetails::create($guest_checkin_details);
                    $this->writeLog("maestro_pms", $hotel_id, "   GuestCheckinDetails 2: ".json_encode($rs));
                    $this->writeLog("maestro_pms", $hotel_id, "Save Check In, in CheckIn 2: [ guest_id => $guest_id, Guest checkin details => ".$rs->sno."]");

                    if( !empty($guest_registration['email_address']) ) {
                        $rs = $this->sendAngelInvitation($guest_registration['email_address'], $hotel_id);
                        $this->writeLog("maestro_pms", $hotel_id, "   Send angel invitation 2: ".$guest_registration['email_address']);
                        $this->writeLog("maestro_pms", $hotel_id, "   Send angel invitation 2 rs: ".json_encode($rs));
                    }
                                                    
                    $this->saveLogTracker([
                        'module_id' => 8,
                        'action'    => 'add',
                        'prim_id'   => $guest_id,
                        'staff_id'  => $user_id,
                        'date_time' => date('Y-m-d H:i:s'),
                        'comments'  => '',
                        'hotel_id'  => $hotel_id,
                        'type'      => 'API-maestro_pms'
                    ]);

                    $success = true;
                    $this->writeLog("maestro_pms", $hotel_id, "End Check In\n\n");
                    DB::commit();

                } else {
                    $this->writeLog("maestro_pms", $hotel_id, " Room occupied");         
                }
                $success = true;
            }

            $this->writeLog("maestro_pms", $hotel_id, "End foreach");
            
        } catch (\Exception $e)  {
            $this->writeLog("maestro_pms", $hotel_id, "   Error Check In::".$e."\n\n");
            $success = false;
            DB::rollback();
        }

        return $success;
    }

    public function CheckOut($hotel_id, $user_id, $checkOut) 
    {
        
        $check_out = $checkOut;
        if(isset($checkOut->CheckOutData)){
            $check_out = $checkOut->CheckOutData->GuestInfo;
        }
        DB::beginTransaction();
        try {
            $this->configTimeZone($hotel_id);
            
            $this->writeLog("maestro_pms", $hotel_id, "==> ".json_encode($check_out));

            foreach ($check_out as $ch) {
                
                $this->writeLog("maestro_pms", $hotel_id, "Start CheckOut");

                $email_address = '';
                $lastname = '';
                $firstname = '';

                if( ( isset($ch->EmailAddress) ) && ( is_string($ch->EmailAddress) && !empty($ch->EmailAddress) ) ) {
                    $email_address = $ch->EmailAddress;
                }

                if( ( isset($ch->LastName) ) && ( is_string($ch->LastName) && !empty($ch->LastName) ) ) {
                    $lastname = $ch->LastName;
                }

                if( ( isset($ch->FirstName) ) && ( is_string($ch->FirstName) && !empty($ch->FirstName) ) ) {
                    $firstname = $ch->FirstName;
                }

                $guest =  GuestRegistration::where(function( $query ) use ( $email_address, $lastname, $firstname ){
                    $query
                        ->where('email_address', $email_address)
                        ->where('lastname', $lastname)
                        ->where('firstname', $firstname);

                })
                ->first();
                
                $this->writeLog("maestro_pms", $hotel_id, "   Data: ".json_encode($ch));
                

                if( $guest ) {

                    $this->writeLog("maestro_pms", $hotel_id, "   Guest: ".json_encode($guest));

                    $guest_id = $guest->guest_id;
                    $check_in = (new DateTime($ch->ArrivalDate))->format('Y-m-d');
                    $check_out = (new DateTime($ch->DepartureDate))->format('Y-m-d');

                    $guest_checkin_details = GuestCheckinDetails::where(function( $query ) use ( $hotel_id, $guest_id, $check_in, $check_out ){
                        $query
                            ->where('hotel_id', $hotel_id)
                            ->where('guest_id',  $guest_id)
                            ->where(DB::raw("(DATE_FORMAT(check_in,'%Y-%m-%d'))"),  $check_in)
                            ->where(DB::raw("(DATE_FORMAT(check_out,'%Y-%m-%d'))"),  $check_out);
                    })
                    ->first();

                    $this->writeLog("maestro_pms", $hotel_id, "   Guest Checkin Details:".json_encode($guest_checkin_details));
                    
                    if( $guest_checkin_details ) {

                        $guest_checkin_details->status = 0;
                        $guest_checkin_details->save();

                        // $this->sendHousekeepingCheckOut($hotel_id,[
                        //     "hotel_id" => $hotel_id,
                        //     "room_id"  => $guest_checkin_details->room_no    
                        // ]);
                    
                    }
                }
                $this->writeLog("maestro_pms", $hotel_id, "End Check in\n\n");
            }
            DB::commit();
            $success = true;
            
        } catch (\Exception $e)  {
            $this->writeLog("maestro_pms", $hotel_id, "Error Check in::".$e."\n\n");
            $success = false;
            DB::rollback();
        }
        return $success;
    }

    public function unique_inArray($hotel_id, $array) 
    {
        try {
            $temp_array = []; 
            $i = 0; 
            $key_array = []; 
            
            foreach(array_reverse($array) as $val) {
                
                $firstname      = '';
                $lastname       = '';
                $email_address  = '';
                $room_code      = '';

                if(isset($val->FirstName)       && is_string($val->FirstName)       && !empty($val->FirstName))      { $firstname        = $this->proccessString($val->FirstName); }
                if(isset($val->LastName)        && is_string($val->LastName)        && !empty($val->LastName))       { $lastname         = $this->proccessString($val->LastName); }
                if(isset($val->EmailAddress)    && is_string($val->EmailAddress)    && !empty($val->EmailAddress))   { $email_address    = $this->proccessString($val->EmailAddress); }
                if(isset($val->RoomCode)        && is_string($val->RoomCode)        && !empty($val->RoomCode))       { $room_code        = $this->proccessString($val->RoomCode); }


                //$this->writeLog("maestro_pms", $hotel_id, "$firstname-$lastname-$email_address-$room_code");

                if (!in_array("$firstname-$lastname-$email_address-$room_code", $key_array)) { 
                    $key_array[] = "$firstname-$lastname-$email_address-$room_code"; 
                    $temp_array[] = $val; 
                } 
                $i++; 
            } 

            $this->writeLog("maestro_pms", $hotel_id, "Array filtered: ".json_encode($temp_array));

            return $temp_array; 

        }  catch (\Exception $e)  {
            return [
                "error" => $e
            ];
        }
        
    }

    public function RoomMove($hotel_id, $user_id, $data) 
    {
        $this->writeLog("maestro_pms", $hotel_id, "Start RoomMove");
        DB::beginTransaction();
        try {
            $this->configTimeZone($hotel_id);
            $index = 0;

            $SourceRoomInformation = [];
            $DestinationRoomInformation = [];

            $is_array = is_array($data->SourceRoomInformation);
            if($is_array) {
                $SourceRoomInformation = $data->SourceRoomInformation;
            } else {
                $SourceRoomInformation[] = $data->SourceRoomInformation;
            }

            $is_array = is_array($data->DestinationRoomInformation);
            if($is_array) {
                $DestinationRoomInformation = $data->DestinationRoomInformation;
            } else {
                $DestinationRoomInformation[] = $data->DestinationRoomInformation;
            }

            foreach ($SourceRoomInformation as $i) {
                $_guest = $i->GuestInfo;

                $email_address = '';
                $lastname = '';
                $firstname = '';

                if( ( isset($_guest->EmailAddress) ) && ( is_string($_guest->EmailAddress) && !empty($_guest->EmailAddress) ) ) {
                    $email_address = $_guest->EmailAddress;
                }
                if( ( isset($_guest->LastName) ) && ( is_string($_guest->LastName) && !empty($_guest->LastName) ) ) {
                    $lastname = $_guest->LastName;
                }
                if( ( isset($_guest->FirstName) ) && ( is_string($_guest->FirstName) && !empty($_guest->FirstName) ) ) {
                    $firstname = $_guest->FirstName;
                }
                

                $guest = GuestRegistration::where(function( $query ) use ( $email_address, $firstname, $lastname ) {
                    $query
                        ->where('email_address', $email_address)
                        ->where('lastname', $lastname)
                        ->where('firstname', $firstname);
                })
                ->first();

                if( $guest ) {
                    
                    $guest_id = $guest->guest_id;

                    $guest_checkin_details = GuestCheckinDetails::where(function( $query ) use ( $hotel_id, $guest_id ){
                        $query
                            ->where('hotel_id', $hotel_id)
                            ->where('guest_id', $guest_id);
                    })
                    ->orderBy('sno','DESC')
                    ->first();
                    
                    if( $guest_checkin_details ) {

                        $location = 'Reservation';

                        if( ( isset($DestinationRoomInformation[$index]) ) && ( isset($DestinationRoomInformation[$index]->GuestInfo) ) && ( is_string($DestinationRoomInformation[$index]->GuestInfo->RoomCode) && !empty($DestinationRoomInformation[$index]->GuestInfo->RoomCode) ) ) {
                            $location = $DestinationRoomInformation[$index]->GuestInfo->RoomCode;
                        }

                        $room = $this->findRoomId($hotel_id, $user_id, $location);
                        $new_room = $room["room_id"];
                        $location = $room["room"];

                        $comment = '';

                        if(isset($i->GuestInfo->ReservationText) && isset($i->GuestInfo->ReservationText->Text)) {
                            if(is_array($i->GuestInfo->ReservationText->Text)){
                                foreach ($ch->ReservationText->Text as $key => $value) {
                                    if(is_string($value)) {
                                        $comment .= "$value ";
                                    }                    
                                }
                            } else {
                                $comment = substr($this->proccessString($ch->ReservationText->Text),0,250);
                            }
                        }

                        RoomMove::create([
                            'guest_id'          => $guest->guest_id,
                            'phone'             => $guest->phone_no,
                            'current_room_no'   => $guest_checkin_details->room_no,
                            'new_room_no'       => $new_room,
                            'comment'           => $comment,
                            'hotel_id'          => $hotel_id,
                            'created_by'        => $user_id,
                            'created_on'        => date('Y-m-d H:i:s'),
                            'updated_by'        => 0,
                            'updated_on'        => null,
                        ]);
                        
                        $guest_checkin_details->room_no = $new_room;
                        $guest_checkin_details->save();
                        DB::commit();
                    }
                }
                $index++;
            }            
            $success = true;
        } catch (\Exception $e)  {

            $this->writeLog("maestro_pms", $hotel_id, "Error RoomMove::".$e);
            $error = $e;
            $success = false;
            DB::rollback();

        }

        return $success;
    }

    public function HousekeepingStatus($hotel_id, $user_id, $data) 
    {
        $this->writeLog("maestro_pms", $hotel_id, "Start Housekeeping Status");
        DB::beginTransaction();
        try {
            
            $this->configTimeZone($hotel_id);
            $hkd = []; //HousekeepingData
            $HousekeepingData = [];

            $this->writeLog("maestro_pms", $hotel_id, "Start Housekeeping Data::". json_encode($data));

            $is_array = is_array($data->Rooms->HousekeepingData);
            if($is_array) {
                $hkd = $data->Rooms->HousekeepingData;
            }else {
                $hkd[] = $data->Rooms->HousekeepingData;
            }
            
            $HousekeepingData["hotel_id"] = $hotel_id;

            foreach ($hkd as $h) {

                $location = 'Reservation';
                if( isset($h->RoomCode) && ( is_string($h->RoomCode) && !empty($h->RoomCode) ) ) {
                    $location = $h->RoomCode;
                }
                $room = $this->findRoomId($hotel_id, $user_id, $location);

                $room_id = $room["room_id"];
                $location = $room["room"];

                if($room_id > 0) {
                    $d = str_replace([' & ','& '],' ',$h->HousekeepingStatusDescription);                    
                    $d = str_replace('\\',' ',$d);
                    $d = str_replace('/',' ',$d);
                    $d = str_replace('  ',' ',$d);

                    $HousekeepingData["rooms"][] = [
                        "room_id" => $room_id,
                        "status" => is_string($h->HousekeepingStatus) ? $h->HousekeepingStatus : '',
                        "description" => is_string($h->HousekeepingStatusDescription) ? trim($d) : ''
                    ];
                }
                
            }

            $curl = curl_init();
            curl_setopt_array($curl, [
                CURLOPT_URL => "https://concierge-dev1.mynuvola.com/index.php/housekeeping/pmsHKChange",
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 30,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => "POST",
                CURLOPT_POSTFIELDS => json_encode($HousekeepingData),
                CURLOPT_HTTPHEADER => [
                    "cache-control: no-cache"
                ],
            ]);            
            $response = curl_exec($curl);
            $err = curl_error($curl);
            curl_close($curl);
            
            $this->writeLog("maestro_pms", $hotel_id, "Curl Response::".json_encode($response));
            $this->writeLog("maestro_pms", $hotel_id, "Curl Error::".json_encode($err));
            $this->writeLog("maestro_pms", $hotel_id, "End Housekeeping Status::".json_encode($HousekeepingData));            

            $success = true;            
        } catch (\Exception $e) {
            $this->writeLog("maestro_pms", $hotel_id, "Error HousekeepingStatus::".$e);
            $error = $e;
            $success = false;
            DB::rollback();
        }

        return $success;
    }

    public function findRoomId($hotel_id, $staff_id, $location)
    {
        if(is_numeric($location)) {
            $sub1 = substr($location,0,1);
            if($sub1 === '0'){ 
                $location = substr($location,1);
            }
        }

        $room = HotelRoom::where(function($query) use ($hotel_id, $location){
            $query
                ->where('hotel_id', $hotel_id)
                ->where('location', $location);
        })->first();

        if($room) {
            return [
                "room_id"   => $room->room_id,
                "room"      => $room->location
            ];
        } else {
            $room = HotelRoom::create([
                'hotel_id'      => $hotel_id,
                'location'      => $location,
                'created_by'    => $staff_id,
                'created_on'    => date('Y-m-d H:i:s'),
                'updated_by'    => null,                
                'updated_on'    => null,
                'active'        => 1,
                'angel_view'    => 1,
                'device_token'  => ''
            ]);

            $this->saveLogTracker([
                'hotel_id'  => $hotel_id,
                'staff_id'  => $staff_id,
                'prim_id'   => $room->room_id,
                'module_id' => 17,
                'action'    => 'add',                
                'date_time' => date('Y-m-d H:i:s'),
                'comments'  => '',                
                'type'      => 'API-maestro_pms'
            ]);

            return [
                "room_id" => $room->room_id,
                "room" => $room->location
            ];
        }
        
    }

    public function getSalt($hotel_id) 
    {
        
        $this->configTimeZone($hotel_id);
        $salt = $this->generateRandomString();
        $this->writeLog("maestro_pms", $hotel_id, "Generate Salt:: $salt");
        
        $m = MaestroPmsSalt::where('hotel_id', $hotel_id)->delete();

        MaestroPmsSalt::create([
            'hotel_id'      => $hotel_id,
            "salt"          => $salt,
            "created_on"    => date('Y-m-d H:i:s')
        ]);
        return $salt;
    }

    public function generateRandomString() 
    { 
        $length = 10;
        
        $salt = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, $length);
        
        if(MaestroPmsSalt::where('salt', $salt)->first()) {
            $this->generateRandomString();
        }

        return $salt;
    }

    public function validatePasswordHash($hotel_id, $pass_hash, $agreed_upon_key) 
    {
        $result = false;
        $this->configTimeZone($hotel_id);
        $m = MaestroPmsSalt::where('hotel_id', $hotel_id)->first();
        $created_on = $m->created_on;
        $now = date('Y-m-d H:i:s');
        $error = '';
        if($m) {
            $rest = (strtotime($now)) - (strtotime($created_on));
            if($rest > 112233445566778899) {
                $result = false;
                $error = 'Invalid password hash';
            }
            $salt = $m->salt;

            if(strcmp(hash('sha256',$agreed_upon_key.$salt),$pass_hash) == 0){
                $result = true;
            } else {
                $result = false;
                $error = 'Invalid password hash';
            }

        } else {
            $result = false;
            $error = 'The hotel does not have the Maestro PMS integration active';
        }

        return [
            "result" => $result,
            "error" => $error
        ];
    }

    private function sendHousekeepingCheckIn($hotel_id, $data)
    {
        $curl = curl_init();
        curl_setopt_array($curl, [
            CURLOPT_URL => "https://concierge-dev1.mynuvola.com/index.php/housekeeping/pmsGuestChange",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => json_encode($data),
            CURLOPT_HTTPHEADER => [
                "cache-control: no-cache"
            ],
        ]);            
        $response = curl_exec($curl);
        $err = curl_error($curl);
        curl_close($curl);
        
        $this->writeLog("maestro_pms", $hotel_id, "Curl Response::".json_encode($response));
        $this->writeLog("maestro_pms", $hotel_id, "Curl Error::".json_encode($err));
        $this->writeLog("maestro_pms", $hotel_id, "End Housekeeping Status::".json_encode($data));
    }

    private function sendHousekeepingCheckOut($hotel_id, $data)
    {
        $curl = curl_init();
        curl_setopt_array($curl, [
            CURLOPT_URL => "https://concierge-dev1.mynuvola.com/index.php/housekeeping/pmsCheckout",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => json_encode($data),
            CURLOPT_HTTPHEADER => [
                "cache-control: no-cache"
            ],
        ]);            
        $response = curl_exec($curl);
        $err = curl_error($curl);
        curl_close($curl);
        
        $this->writeLog("maestro_pms", $hotel_id, "Curl Response::".json_encode($response));
        $this->writeLog("maestro_pms", $hotel_id, "Curl Error::".json_encode($err));
        $this->writeLog("maestro_pms", $hotel_id, "End Housekeeping Status::".json_encode($data));
    }

    
}
